--- ../../../../org/Amoeba.java	2020-04-09 11:38:31.030500000 +0200
+++ Amoeba.java	2020-04-09 11:36:10.884000000 +0200
@@ -23,6 +23,7 @@
     double fmin;
     double[] y;
     double[][] p;
+    double[][] constr;
 
     public Amoeba(final double ftoll) {
         this.ftol = ftoll;
@@ -30,12 +31,13 @@
 
     public double[] minimize(final double[] point, final double del, final RealValueFun func) {
         double[] dels = buildVector(point.length, del);
-        return minimize(point, dels, func);
+        return minimize(point, dels, null, func);
     }
 
-    public double[] minimize(final double[] point, final double[] dels, final RealValueFun func) {
+    public double[] minimize(final double[] point, final double[] dels, final double[][] constr, final RealValueFun func) {
         int ndim = point.length;
         double[][] pp = new double[ndim + 1][ndim];
+        this.constr = constr;
         for (int i = 0; i < ndim + 1; i++) {
             for (int j = 0; j < ndim; j++)
                 pp[i][j] = point[j];
@@ -122,6 +124,10 @@
         }
     }
 
+    public double getMin() {
+        return fmin;
+    }
+
     public void get_psum(final double[][] p, final double[] psum) {
         for (int j = 0; j < ndim; j++) {
             double sum = 0.0;
@@ -136,8 +142,14 @@
         double[] ptry = new double[ndim];
         double fac1 = (1.0 - fac) / ndim;
         double fac2 = fac1 - fac;
-        for (int j = 0; j < ndim; j++)
+        for (int j = 0; j < ndim; j++) {
             ptry[j] = psum[j] * fac1 - p[ihi][j] * fac2;
+            if (constr != null) {
+                if (ptry[j] < constr[j][0]) ptry[j] = constr[j][0];
+                if (ptry[j] > constr[j][1]) ptry[j] = constr[j][1];
+            }
+        }
+
         double ytry = func.funk(ptry);
         if (ytry < y[ihi]) {
             y[ihi] = ytry;
@@ -148,4 +160,9 @@
         }
         return ytry;
     }
+
+    public int getEvaluations() {
+        return nfunc;
+    }
+
 }
